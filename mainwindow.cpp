#include "mainwindow.h"
#include <QVBoxLayout>
#include <QHBoxLayout>
#include <QMessageBox>
#include <QHostAddress>
#include <QRegularExpression>
#include <QRegularExpressionMatch>
#include <QPixmap>
#include <QResizeEvent>

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent), currentPhotoSurname(""),
    isPhotoAnimating(false), animationDirection(1),
    animationOffset(0), maxAnimationOffset(20)
{
    setupUI();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
    animationTimer = new QTimer(this);
    connect(animationTimer, &QTimer::timeout, this, &MainWindow::updateAnimationFrame);

    tcpServer = new QTcpServer(this);
    if (!tcpServer->listen(QHostAddress::Any, 12345)) {
        QMessageBox::critical(this, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä: " + tcpServer->errorString());
        close();
        return;
    }

    connect(tcpServer, &QTcpServer::newConnection, this, &MainWindow::newConnection);
    statusLabel->setText("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 12345\n–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...");
}

MainWindow::~MainWindow()
{
    stopPhotoAnimation();
    qDeleteAll(clientSockets);
    delete animationTimer;
}

void MainWindow::setupUI()
{
    setWindowTitle("Server, LipovskiyMatvei, –õ–∏–ø–æ–≤—Å–∫–∏–π –ú.–í. ");
    resize(800, 600); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞

    // –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    mainContainer = new QWidget(this);
    QVBoxLayout *mainLayout = new QVBoxLayout(mainContainer);
    mainLayout->setSpacing(20);

    // –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ (–≤–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å)
    statusLabel = new QLabel(this);
    statusLabel->setAlignment(Qt::AlignCenter);
    statusLabel->setStyleSheet("font-weight: bold; font-size: 14px;");
    statusLabel->setMinimumHeight(40);

    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ñ–æ—Ç–æ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π
    QWidget *photoContainer = new QWidget(this);
    photoContainer->setMinimumHeight(400);
    photoContainer->setStyleSheet("background-color: #f0f0f0; border: 1px solid #ccc;");

    QVBoxLayout *containerLayout = new QVBoxLayout(photoContainer);
    containerLayout->setContentsMargins(10, 10, 10, 10);

    // –û–±–ª–∞—Å—Ç—å –¥–ª—è —Ñ–æ—Ç–æ
    photoLabel = new QLabel(photoContainer);
    photoLabel->setAlignment(Qt::AlignCenter);
    photoLabel->setStyleSheet("background-color: white;");

    containerLayout->addWidget(photoLabel);

    // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –≥–ª–∞–≤–Ω—ã–π –º–∞–∫–µ—Ç
    mainLayout->addWidget(statusLabel, 0);
    mainLayout->addWidget(photoContainer, 1);

    setCentralWidget(mainContainer);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ
    photoLabel->setText("–§–æ—Ç–æ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å\n–ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è");
}

void MainWindow::resizeEvent(QResizeEvent *event)
{
    QMainWindow::resizeEvent(event);
    if (!currentPhotoSurname.isEmpty()) {
        showStudentPhoto(currentPhotoSurname);
    }
}

void MainWindow::newConnection()
{
    QTcpSocket *clientSocket = tcpServer->nextPendingConnection();
    connect(clientSocket, &QTcpSocket::readyRead, this, &MainWindow::readClient);
    connect(clientSocket, &QTcpSocket::disconnected, this, &MainWindow::clientDisconnected);

    clientSockets.append(clientSocket);
    statusLabel->setText(QString("–ü–æ–¥–∫–ª—é—á–µ–Ω –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç\n–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: %1").arg(clientSockets.size()));
}

void MainWindow::readClient()
{
    QTcpSocket *clientSocket = qobject_cast<QTcpSocket*>(sender());
    if (!clientSocket) return;

    QDataStream in(clientSocket);
    in.setVersion(QDataStream::Qt_6_0);

    QString message;
    in >> message;

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    stopPhotoAnimation();
    animationOffset = 0;

    processMessage(clientSocket, message);
}

void MainWindow::processMessage(QTcpSocket *clientSocket, const QString &message)
{
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º QRegularExpression
    QRegularExpression rx("Hello, Garson, I'm (\\w+)!");
    QRegularExpressionMatch match = rx.match(message);

    if (match.hasMatch()) {
        QString surname = match.captured(1);
        currentPhotoSurname = surname;

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É
        QString response = "I'm not Garson, I'm Server! Go To Sleep To the Garden!";
        QByteArray block;
        QDataStream out(&block, QIODevice::WriteOnly);
        out.setVersion(QDataStream::Qt_6_0);
        out << response;
        clientSocket->write(block);

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ –∏ –∑–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
        showStudentPhoto(surname);
        startPhotoAnimation();

        statusLabel->setText("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É:\n" + response);
    } else {
        // –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        QString error = "Error: Invalid message format! Expected: 'Hello, Garson, I'm [Surname]!'";
        QByteArray block;
        QDataStream out(&block, QIODevice::WriteOnly);
        out.setVersion(QDataStream::Qt_6_0);
        out << error;
        clientSocket->write(block);

        statusLabel->setText("–û—à–∏–±–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:\n" + message);
    }
}

void MainWindow::showStudentPhoto(const QString &surname)
{
    // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ
    QString imagePath = ":/" + surname + ".jpg";
    QPixmap studentPhoto(imagePath);

    if (!studentPhoto.isNull()) {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å —É—á–µ—Ç–æ–º –º–µ—Å—Ç–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        int maxWidth = photoLabel->parentWidget()->width() - 50;
        int maxHeight = photoLabel->parentWidget()->height() - 50 - maxAnimationOffset;

        QPixmap scaledPhoto = studentPhoto.scaled(
            maxWidth,
            maxHeight,
            Qt::KeepAspectRatio,
            Qt::SmoothTransformation
            );

        photoLabel->setPixmap(scaledPhoto);
        photoLabel->resize(scaledPhoto.size());
        centerPhoto();
    } else {
        // –¢–µ–∫—Å—Ç–æ–≤–∞—è –∑–∞–≥–ª—É—à–∫–∞
        photoLabel->setText("üñºÔ∏è –§–æ—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç–∞: " + surname + "\n"
                                                             "üîÅ –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä—ã–∂–∫–æ–≤ –∞–∫—Ç–∏–≤–Ω–∞\n"
                                                             "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ");
        photoLabel->resize(photoLabel->sizeHint());
        centerPhoto();
    }
}

void MainWindow::centerPhoto()
{
    QWidget *parent = photoLabel->parentWidget();
    int x = (parent->width() - photoLabel->width()) / 2;
    int y = (parent->height() - photoLabel->height() - maxAnimationOffset) / 2;
    photoLabel->move(x, y);
}

void MainWindow::startPhotoAnimation()
{
    if (!isPhotoAnimating) {
        isPhotoAnimating = true;
        animationTimer->start(50); // 20 FPS
    }
}

void MainWindow::stopPhotoAnimation()
{
    if (isPhotoAnimating) {
        animationTimer->stop();
        isPhotoAnimating = false;
    }
}

void MainWindow::updateAnimationFrame()
{
    if (!isPhotoAnimating) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ
    animationOffset += animationDirection * 2;

    // –ú–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≥—Ä–∞–Ω–∏—Ü
    if (animationOffset >= maxAnimationOffset || animationOffset <= -maxAnimationOffset) {
        animationDirection *= -1;
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –∫ –ø–æ–∑–∏—Ü–∏–∏ —Ñ–æ—Ç–æ
    QPoint pos = photoLabel->pos();
    photoLabel->move(pos.x(), pos.y() - animationDirection * 1);
}

void MainWindow::clientDisconnected()
{
    QTcpSocket *clientSocket = qobject_cast<QTcpSocket*>(sender());
    if (clientSocket) {
        clientSockets.removeOne(clientSocket);
        clientSocket->deleteLater();
        statusLabel->setText(QString("–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω\n–û—Å—Ç–∞–ª–æ—Å—å –∫–ª–∏–µ–Ω—Ç–æ–≤: %1").arg(clientSockets.size()));
    }
}
